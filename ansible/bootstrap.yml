---
- hosts: vps
  remote_user: root
  become: true
  vars:
    ssh_key: "{{ lookup('file', vps_ssh_public_key_path) }}"
  vars_files:
    - "../terraform/tf_ansible_vars.yml"

  pre_tasks:
    - name: Wait for cloud-init
      command: cloud-init status --wait
      changed_when: false
      when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

    - name: Install packages (Debian)
      import_tasks: tasks/install-debian.yml
      when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

    - name: Install packages (Alpine)
      import_tasks: tasks/install-alpine.yml
      when: ansible_distribution == "Alpine"

    - name: Create user
      user:
        name: "{{ vps_username }}"
        shell: /bin/sh
        groups: wheel
        append: true
        create_home: true
        password: "{{ vps_password | password_hash('sha512') }}"
        update_password: on_create
        state: present

    - name: Add SSH key to new user's authorized_keys
      authorized_key:
        user: "{{ vps_username }}"
        key: "{{ ssh_key }}"
        path: "/home/{{ vps_username }}/.ssh/authorized_keys"
        state: present

    - name: Set timezone
      community.general.timezone:
        name: "{{ vps_timezone }}"

    - name: Enable openrc services (Alpine)
      service:
        name: "{{ item.name }}"
        runlevel: "{{ item.level }}"
        state: started
      when: ansible_distribution == "Alpine" and ansible_service_mgr == "openrc"
      with_items:
        - {name: root, level: boot}
        - {name: hostname, level: boot}
        - {name: bootmisc, level: boot}
        - {name: binfmt, level: boot}
        - {name: fsck, level: boot}
        - {name: urandom, level: boot}
        - {name: root, level: boot}
        - {name: swap, level: boot}
        - {name: localmount, level: boot}
        - {name: sysctl, level: boot}
        - {name: devfs, level: sysinit}
        - {name: cgroups, level: sysinit}
        - {name: sysfs, level: sysinit}

  roles:
    - name: Security hardening
      role: kencx.ansible_collection.security
      vars:
        ssh_disable_root_login: true
        ufw_rules:
          - {rule: 'allow', port: '22', proto: 'tcp', comment: 'ssh'}
          - {rule: 'allow', port: '80', proto: 'tcp', comment: 'http'}
          - {rule: 'allow', port: '443', proto: 'tcp', comment: 'https'}

    - name: Install Docker
      role: geerlingguy.docker
      vars:
        docker_users: ["{{ vps_username }}"]
        docker_compose_package: docker-cli-compose

    - name: Setup webhook
      role: kencx.ansible_collection.webhook
