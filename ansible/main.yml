---
- name: Bootstrap system
  hosts: vps
  remote_user: root
  become: true
  tags: bootstrap
  vars_files:
    - "../terraform/tf_ansible_vars.yml"
    - "vars.yml"
  vars:
    ssh_key: "{{ lookup('file', ssh_public_key_path) }}"

  pre_tasks:
    - name: Wait for cloud-init
      ansible.builtin.command: cloud-init status --wait
      changed_when: false
      when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

    - name: Install packages (Debian)
      ansible.builtin.import_tasks: tasks/install-debian.yml
      when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

    - name: Install packages (Alpine)
      ansible.builtin.import_tasks: tasks/install-alpine.yml
      when: ansible_distribution == "Alpine"

    - name: Create user
      ansible.builtin.user:
        name: "{{ username }}"
        shell: /bin/sh
        groups: wheel
        append: true
        create_home: true
        password: "{{ password | password_hash('sha512') }}"
        update_password: on_create
        state: present
      no_log: true

    - name: Add SSH key to new user's authorized_keys
      ansible.posix.authorized_key:
        user: "{{ username }}"
        key: "{{ ssh_key }}"
        path: "/home/{{ username }}/.ssh/authorized_keys"
        state: present

    - name: Set timezone
      community.general.timezone:
        name: "{{ timezone }}"

    - name: Enable openrc services (Alpine)
      ansible.builtin.service:
        name: "{{ item.name }}"
        runlevel: "{{ item.level }}"
        state: started
      when: ansible_distribution == "Alpine" and ansible_service_mgr == "openrc"
      with_items:
        - {name: root, level: boot}
        - {name: hostname, level: boot}
        - {name: bootmisc, level: boot}
        - {name: binfmt, level: boot}
        - {name: fsck, level: boot}
        - {name: root, level: boot}
        - {name: swap, level: boot}
        - {name: localmount, level: boot}
        - {name: sysctl, level: boot}
        - {name: devfs, level: sysinit}
        - {name: cgroups, level: sysinit}
        - {name: sysfs, level: sysinit}
        - {name: crond, level: default}

    - name: Schedule logrotate with cron
      ansible.builtin.cron:
        name: logrotate
        job: "logrotate --log=syslog /etc/logrotate.conf"
        special_time: daily
        state: present

  roles:
    - name: Security hardening
      role: kencx.ansible_collection.security
      vars:
        ssh_disable_root_login: true
        ufw_rules:
          - {rule: 'allow', port: '80', proto: 'tcp', comment: 'http'}
          - {rule: 'allow', port: '443', proto: 'tcp', comment: 'https'}

    - name: Install Docker
      role: geerlingguy.docker
      vars:
        docker_users: ["{{ username }}"]
        docker_compose_package: docker-cli-compose

- name: Configure apps
  hosts: vps
  remote_user: "{{ username }}"
  become: false
  tags: apps
  vars_files:
    - "../terraform/tf_ansible_vars.yml"
    - "vars.yml"
  vars:
    apps_dir: "/home/{{ username }}/apps"

  tasks:
    - name: Create directories
      ansible.builtin.file:
        path: "{{ apps_dir }}/{{ item }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
        state: directory
      with_items:
        - "caddy"
        - "cgit"
        - "site/resume/static"
        - "sxkcd/data"
        - "sxkcd/redis"

    - name: Copy docker-compose.yml
      ansible.builtin.template:
        src: "tasks/templates/docker-compose.yml.j2"
        dest: "{{ apps_dir }}/docker-compose.yml"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"

    - name: Configure sxkcd server
      ansible.builtin.import_tasks: ./tasks/sxkcd.yml

    - name: Configure cgit
      ansible.builtin.import_tasks: ./tasks/cgit.yml

    - name: Configure caddy
      ansible.builtin.import_tasks: ./tasks/caddy.yml
